import time


def exercise_029(minimum_a, maximum_a, minimum_b, maximum_b):
    """
    Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3^5=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125
    If they are then placed in numerical order, with any repeats removed,
    we get the following sequence of 15 distinct terms:

    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

    How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤
    100 and 2 ≤ b ≤ 100?

    :param minimum_a: Minimum value for a
    :type minimum_a: int
    :param maximum_a: Maximum value for a
    :type maximum_a: int
    :param minimum_b: Minimum value for b
    :type minimum_b: int
    :param maximum_b: Maximum value for b
    :type maximum_b: int

    :return: Sum of the diagonals
    :rtype: int
    """

    terms = set()
    for a in range(minimum_a, maximum_a + 1):
        for b in range(minimum_b, maximum_b + 1):
            terms.add(a ** b)
    return len(terms)


if __name__ == '__main__':
    start_time = time.time()
    print(exercise_029(2, 100, 2, 100))
    end_time = time.time()
    print('{} s'.format(end_time - start_time))
